{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "baseName": {
      "defaultValue": "CWDocumentUpload",
      "type": "string",
      "metadata": {
        "description": "Name use as base-template to named the resources deployed in Azure."
      }
    },
    "repoUrl": {
      "defaultValue": "https://github.com/johnduprey/CWDocumentUpload.git",
      "type": "string",
      "metadata": {
        "description": "Repository URL to use"
      }
    },
    "branchName": {
      "defaultValue": "main",
      "type": "string",
      "metadata": {
        "description": "Name of branch to deploy"
      }
    },
    "CWHost": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Your CWM Server Hostname (e.g. your.cwhostname.com)"
      }
    },
    "CWCompany": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Your CWM Company ID"
      }
    },
    "CWClientID": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Your CWM Client ID"
      }
    },
    "CWPublicKey": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Your CWM Public Key"
      }
    },
    "CWPrivateKey": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Your CWM Private Key"
      }
    }
  },
  "variables": {
    "suffix": "[substring(toLower(uniqueString(resourceGroup().id, resourceGroup().location)),0,5)]",
    "funcAppName": "[toLower(concat(parameters('baseName'), variables('suffix')))]",
    "funcStorageName": "[tolower(concat(substring(parameters('baseName'), 0, min(length(parameters('baseName')),16)), 'stg', variables('suffix')))]",
    "serverFarmName": "[concat(substring(parameters('baseName'), 0, min(length(parameters('baseName')),14)), '-srv-', variables('suffix'))]",
    "uniqueResourceNameBase": "[toLower(concat(parameters('baseName'), variables('suffix')))]"
  },
  "resources": [
    {
      "type": "Microsoft.KeyVault/vaults",
      "name": "[variables('uniqueResourceNameBase')]",
      "apiVersion": "2016-10-01",
      "location": "[resourceGroup().location]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[subscription().tenantid]",
        "accessPolicies": [
          {
            "tenantId": "[subscription().tenantid]",
            "objectId": "[reference(resourceId('Microsoft.Web/sites', variables('funcAppName')),'2019-08-01', 'full').identity.principalId]",
            "permissions": {
              "keys": [],
              "secrets": ["get", "set"],
              "certificates": []
            }
          }
        ],
        "enabledForDeployment": true,
        "enabledForDiskEncryption": false,
        "enabledForTemplateDeployment": true
      },
      "resources": [
        {
          "type": "secrets",
          "name": "CWClientID",
          "apiVersion": "2015-06-01",
          "properties": {
            "contentType": "text/plain",
            "value": "[parameters('CWClientID')]"
          },
          "dependsOn": [
            "[resourceId('Microsoft.KeyVault/vaults', variables('uniqueResourceNameBase'))]"
          ]
        },
        {
          "type": "secrets",
          "name": "CWPublicKey",
          "apiVersion": "2015-06-01",
          "properties": {
            "contentType": "text/plain",
            "value": "[parameters('CWPublicKey')]"
          },
          "dependsOn": [
            "[resourceId('Microsoft.KeyVault/vaults', variables('uniqueResourceNameBase'))]"
          ]
        },
        {
          "type": "secrets",
          "name": "CWPrivateKey",
          "apiVersion": "2015-06-01",
          "properties": {
            "contentType": "text/plain",
            "value": "[parameters('CWPrivateKey')]"
          },
          "dependsOn": [
            "[resourceId('Microsoft.KeyVault/vaults', variables('uniqueResourceNameBase'))]"
          ]
        }
      ],
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('funcAppName'))]"
      ]
    },
    {
      "apiVersion": "2015-08-01",
      "type": "Microsoft.Web/sites",
      "identity": {
        "type": "SystemAssigned"
      },
      "name": "[variables('funcAppName')]",
      "location": "[resourceGroup().location]",
      "kind": "functionapp",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms',variables('serverFarmName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('funcStorageName'))]"
      ],
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('serverFarmName'))]",
        "siteConfig": {
          "Use32BitWorkerProcess": false,
          "powerShellVersion": "7.2",
          "appSettings": [
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('funcStorageName'), ';AccountKey=', listKeys(variables('funcStorageName'),'2015-05-01-preview').key1)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('funcStorageName'), ';AccountKey=', listKeys(variables('funcStorageName'),'2015-05-01-preview').key1)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[variables('funcAppName')]"
            },
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "1"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~4"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "powershell"
            },
            {
              "name": "CWHost",
              "value": "[parameters('CWHost')]"
            },
            {
              "name": "CWCompany",
              "value": "[parameters('CWCompany')]"
            },
            {
              "name": "CWClientID",
              "value": "[concat('@Microsoft.KeyVault(SecretUri=https://',variables('uniqueResourceNameBase'), '.vault.azure.net/secrets/CWClientID)')]"
            },
            {
              "name": "CWPublicKey",
              "value": "[concat('@Microsoft.KeyVault(SecretUri=https://',variables('uniqueResourceNameBase'), '.vault.azure.net/secrets/CWPublicKey)')]"
            },
            {
              "name": "CWPrivateKey",
              "value": "[concat('@Microsoft.KeyVault(SecretUri=https://',variables('uniqueResourceNameBase'), '.vault.azure.net/secrets/CWPrivateKey)')]"
            }
          ]
        }
      },
      "resources": [
        {
          "apiVersion": "2015-08-01",
          "name": "web",
          "type": "sourcecontrols",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites/', variables('funcAppName'))]"
          ],
          "properties": {
            "RepoUrl": "[parameters('repoURL')]",
            "branch": "[parameters('branchName')]",
            "publishRunbook": true,
            "isGitHubAction": true
          }
        }
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2018-07-01",
      "name": "[variables('funcStorageName')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "funStorageName"
      },
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "Storage"
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2018-02-01",
      "name": "[variables('serverFarmName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Y1",
        "tier": "Dynamic",
        "size": "Y1",
        "family": "Y",
        "capacity": 0
      },
      "properties": {
        "perSiteScaling": false,
        "maximumElasticWorkerCount": 1,
        "isSpot": false,
        "reserved": false,
        "isXenon": false,
        "hyperV": false,
        "targetWorkerCount": 0,
        "targetWorkerSizeId": 0,
        "name": "[variables('serverFarmName')]",
        "computeMode": "Dynamic"
      }
    }
  ],
  "outputs": {}
}
